/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filters;

import static com.oracle.jrockit.jfr.ContentType.Timestamp;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import java.io.IOException;
import java.security.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static jdk.nashorn.tools.ShellFunctions.input;

/**
 *
 * @author mostafa
 */
public class browser extends javax.swing.JFrame {
    
    /**
     * Creates new form browser
     */
    public browser() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        photo = new javax.swing.JLabel();
        javax.swing.JButton browser = new javax.swing.JButton();
        save = new javax.swing.JButton();
        red = new javax.swing.JButton();
        blue = new javax.swing.JButton();
        green = new javax.swing.JButton();
        path = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        purple = new javax.swing.JButton();
        Cyan = new javax.swing.JButton();
        yellow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        browser.setText("Browser");
        browser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        red.setText("Red");
        red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redActionPerformed(evt);
            }
        });

        blue.setText("Blue");
        blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueActionPerformed(evt);
            }
        });

        green.setText("Green");
        green.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenActionPerformed(evt);
            }
        });

        path.setToolTipText("");

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        purple.setText("Purple");
        purple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purpleActionPerformed(evt);
            }
        });

        Cyan.setText("Cyan");
        Cyan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CyanActionPerformed(evt);
            }
        });

        yellow.setText("Yellow");
        yellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(photo, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(path, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(browser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(red, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(blue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(green, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(purple, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(Cyan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(yellow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(browser, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(red, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blue, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(green, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(purple, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Cyan, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yellow, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 371, Short.MAX_VALUE)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(photo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try
        {   
            JFileChooser a = new JFileChooser();
            a.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            a.showOpenDialog(this);
            String pa=a.getSelectedFile().getPath();
            System.out.println(pa);
            String na = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new java.util.Date());
            System.out.println(na);
            try{
            File n = new File(pa+na+".jpg");
            ImageIO.write((RenderedImage) photo.getIcon(), ".jpg",n);
            }
            catch(IOException e)
            {
               System.out.println("Error: " + e);
            }
        }
        catch(Exception e)
        {
         JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE);  
        }
    }//GEN-LAST:event_saveActionPerformed

    private void browserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserActionPerformed
        String pa;
        JFileChooser a = new JFileChooser();
        a.showOpenDialog(this);
        pa = a.getSelectedFile().getPath();
        path.setText(pa);
        String s = pa.replaceAll(".*?(.?.?.?)?$", "$1");
        if("jpg".equals(s)||"bmp".equals(s)||"png".equals(s)||"gif".equals(s))
        { 
        ImageIcon p = new ImageIcon(pa);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
        }
        else
        {
        JOptionPane.showMessageDialog(null,"Must enter .jpg or .bmp or .png or .gif","Error",JOptionPane.INFORMATION_MESSAGE);
        } 
        
      
    }//GEN-LAST:event_browserActionPerformed

    private void redActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redActionPerformed
        try{
        File input = new File (path.getText()); 
        BufferedImage Image = null;
        try {
            Image = ImageIO.read(input);
        } catch (IOException ex) {
            Logger.getLogger(browser.class.getName()).log(Level.SEVERE, null, ex);
        }
        int r=0,b=0,g=0,a=0;
        int width=Image.getWidth();
        int height=Image.getHeight();
        Color c = null;
         int count=0;
        for(int i=0;i<height;i++)
        {    
        for (int j=0;j<width;j++)
        {
            count ++;
            c=new Color(Image.getRGB(j,i));
            a=c.getAlpha();
            r=c.getRed();
            b=0*c.getBlue();
            g=0*c.getGreen();
            int p = (a<<24) | (r<<16) | (g<<8) | b;
            Image.setRGB(j, i, p);         
        }
        }
        ImageIcon p = new ImageIcon(Image);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
       }
       catch(Exception e){
          JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE); 
       }
    }//GEN-LAST:event_redActionPerformed

    private void blueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueActionPerformed
          try{
        File input = new File (path.getText()); 
        BufferedImage Image = null;
        try {
            Image = ImageIO.read(input);
        } catch (IOException ex) {
            Logger.getLogger(browser.class.getName()).log(Level.SEVERE, null, ex);
        }
        int r=0,b=0,g=0,a=0;
        int width=Image.getWidth();
        int height=Image.getHeight();
        Color c = null;
         int count=0;
        for(int i=0;i<height;i++)
        {    
        for (int j=0;j<width;j++)
        {
            count ++;
            c=new Color(Image.getRGB(j,i));
            a=c.getAlpha();
            r=0*c.getRed();
            b=c.getBlue();
            g=0*c.getGreen();
            int p = (a<<24) | (r<<16) | (g<<8) | b;
            Image.setRGB(j, i, p);         
        }
        }
        ImageIcon p = new ImageIcon(Image);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
       }
       catch(Exception e){
          JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE); 
       }
    }//GEN-LAST:event_blueActionPerformed

    private void greenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenActionPerformed
          try{
        File input = new File (path.getText()); 
        BufferedImage Image = null;
        try {
            Image = ImageIO.read(input);
        } catch (IOException ex) {
            Logger.getLogger(browser.class.getName()).log(Level.SEVERE, null, ex);
        }
        int r=0,b=0,g=0,a=0;
        int width=Image.getWidth();
        int height=Image.getHeight();
        Color c = null;
         int count=0;
        for(int i=0;i<height;i++)
        {    
        for (int j=0;j<width;j++)
        {
            count ++;
            c=new Color(Image.getRGB(j,i));
            a=c.getAlpha();
            r=0*c.getRed();
            b=0*c.getBlue();
            g=c.getGreen();
            int p = (a<<24) | (r<<16) | (g<<8) | b;
            Image.setRGB(j, i, p);         
        }
        }
        ImageIcon p = new ImageIcon(Image);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
       }
       catch(Exception e){
          JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE); 
       }
    }//GEN-LAST:event_greenActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
         System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void purpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purpleActionPerformed
       try{
        File input = new File (path.getText()); 
        BufferedImage Image = null;
        try {
            Image = ImageIO.read(input);
        } catch (IOException ex) {
            Logger.getLogger(browser.class.getName()).log(Level.SEVERE, null, ex);
        }
        int r=0,b=0,g=0,a=0;
        int width=Image.getWidth();
        int height=Image.getHeight();
        Color c = null;
         int count=0;
        for(int i=0;i<height;i++)
        {    
        for (int j=0;j<width;j++)
        {
            count ++;
            c=new Color(Image.getRGB(j,i));
            a=c.getAlpha();
            r=c.getRed();
            b=c.getBlue();
            g=0*c.getGreen();
            int p = (a<<24) | (r<<16) | (g<<8) | b;
            Image.setRGB(j, i, p);         
        }
        }
        ImageIcon p = new ImageIcon(Image);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
       }
       catch(Exception e){
          JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE); 
       }
    }//GEN-LAST:event_purpleActionPerformed

    private void CyanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CyanActionPerformed
        try{
        File input = new File (path.getText()); 
        BufferedImage Image = null;
        try {
            Image = ImageIO.read(input);
        } catch (IOException ex) {
            Logger.getLogger(browser.class.getName()).log(Level.SEVERE, null, ex);
        }
        int r=0,b=0,g=0,a=0;
        int width=Image.getWidth();
        int height=Image.getHeight();
        Color c = null;
         int count=0;
        for(int i=0;i<height;i++)
        {    
        for (int j=0;j<width;j++)
        {
            count ++;
            c=new Color(Image.getRGB(j,i));
            a=c.getAlpha();
            r=0*c.getRed();
            b=c.getBlue();
            g=c.getGreen();
            int p = (a<<24) | (r<<16) | (g<<8) | b;
            Image.setRGB(j, i, p);         
        }
        }
        ImageIcon p = new ImageIcon(Image);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
       }
       catch(Exception e){
          JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE); 
       }
    }//GEN-LAST:event_CyanActionPerformed

    private void yellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowActionPerformed
        try{
        File input = new File (path.getText()); 
        BufferedImage Image = null;
        try {
            Image = ImageIO.read(input);
        } catch (IOException ex) {
            Logger.getLogger(browser.class.getName()).log(Level.SEVERE, null, ex);
        }
        int r=0,b=0,g=0,a=0;
        int width=Image.getWidth();
        int height=Image.getHeight();
        Color c = null;
         int count=0;
        for(int i=0;i<height;i++)
        {    
        for (int j=0;j<width;j++)
        {
            count ++;
            c=new Color(Image.getRGB(j,i));
            a=c.getAlpha();
            r=c.getRed();
            b=0*c.getBlue();
            g=c.getGreen();
            int p = (a<<24) | (r<<16) | (g<<8) | b;
            Image.setRGB(j, i, p);         
        }
        }
        ImageIcon p = new ImageIcon(Image);// set the path
        Image fr= p.getImage();//conveting Imageicon into image
        Image n= fr.getScaledInstance(photo.getWidth(),photo.getHeight(),Image.SCALE_SMOOTH);//Scale the image 
        ImageIcon l= new ImageIcon(n);// set the image as Imageicon
        photo.setIcon(l);
       }
       catch(Exception e){
          JOptionPane.showMessageDialog(null,"Must import an image first","Error",JOptionPane.INFORMATION_MESSAGE); 
       }
    }//GEN-LAST:event_yellowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(browser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(browser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(browser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(browser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new browser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cyan;
    private javax.swing.JButton blue;
    private javax.swing.JButton exit;
    private javax.swing.JButton green;
    private javax.swing.JLabel path;
    private javax.swing.JLabel photo;
    private javax.swing.JButton purple;
    private javax.swing.JButton red;
    private javax.swing.JButton save;
    private javax.swing.JButton yellow;
    // End of variables declaration//GEN-END:variables

}
